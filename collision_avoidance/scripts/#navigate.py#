#!/usr/bin/env python

import rospy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from tf2_msgs import TFMessage
from numpy import concatenate
import numpy as np


class RobotController:

    LINEAR_SPEED=0.1
    TURN_SPEED=np.deg2rad(45)

    def __init__(self):
        self.pub = rospy.Publisher('cmd_vel',Twist,queue_size = 10)
        self.sub = rospy.Subscriber('tf', TFMessage, moveStop)
        self.mc = Twist()
        self.moving = False
        self.lin_mvt = 0
        self.ang_mvt = 0

    def moveStop(tf):
        if self.moving:
            
        else:
            
            

    def turn(self, degrees):
        
        self._command_motor(0, self.TURN_SPEED)

        # wait for the right amount of time
        t = degrees / self.TURN_SPEED
	rospy.loginfo("turning for {}".format(t))
        rospy.sleep(t)

        self._stop()

    def move(self, meters):

        self._command_motor(self.LINEAR_SPEED, 0)

        # wait for the right amount of time
        t = meters / self.LINEAR_SPEED
	rospy.loginfo("moving for {}".format(t))
        rospy.sleep(t)

        self._stop()

    def _stop(self):
        self._command_motor(0,0)

    def _command_motor(self, lin, turn):
       
        # set speed
        self.mc.linear.x = lin
        self.mc.angular.z = turn

        # publish message
        self.pub.publish(self.mc)

def navigate(rc): 
    
    rc.move(1.0)
    rc.turn(np.deg2rad(90))
    rc.move(1.0)
    rc.turn(-np.deg2rad(90))
    rc.move(1.0)      

def main():

    # initialise
    rospy.init_node("Navigate", anonymous=True)

    rc = RobotController()
    navigate(rc)

if __name__ == '__main__':
    main()
